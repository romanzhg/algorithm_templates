你好，字节跳动诚邀你参加后台开发工程师-机器学习平台职位的面试。 



【面试信息】

面试形式：视频面试

面试时间：2020-03-11 20:00:00GMT+08:00

面试链接：https://people.toutiaocloud.com/atsx/bridge/video/interviewee/03c1fca8-42f2-482e-bcc6-00143f7bc10b




最长连续子序列
给定一个整形数组长度为n
求构造出子序列连续并且长度最大，要求子序列有顺序。
连续定义序列 [x, x+1, ..., x+k-1] ，长度是k
例如数组 [5, 3, 1, 2, 4] 的子序列 正确的表述例子， [3] [5,3, 1, 2, 4] [5, 1, 4] 但是 [1, 3] 不是，因为要按照从左往右顺序 [3, 1] 是正确的子序列。
输入描述
n个整数，1<=n<=200000
a1, a2, ..., an (1<=ai<=10^9）
输出描述
k
任意一个可以组成最大长度的连续子序列的数组元素下标 数组，下标按照递增排列
示例1
输入
7
3 3 4 7 5 6 8
输出
4
2 3 5 6



#include <iostream>
using namespace std;

#define SIZE_LIMIT 200010

int input_size;
int input[SIZE_LIMIT];
int next[SIZE_LIMIT];

unordered_map<int, int> value_to_len;
unordered_map<int, int> value_to_index;

int main() {
    //int a;
    //cin >> a;
    cout << "Hello World!" << endl;
    scanf("%d", &input_size);
    for (int i = 0; i < input_size; i++) {
        scanf("%d", &input[i]);
        
    }
    
    value_to_len.clear();
    
    int max_len = 0;
    int head = 0;
    for (int i = input_size - 1; i >= 0; i--) {
        int cur_value = input[i];
        if (value_to_len.find(cur_value + 1) != value_to_len.end()) {
            if (value_to_len[cur_value + 1] + 1 > value_to_len[cur_value]) {
                value_to_len[cur_value] = value_to_len[cur_value + 1] + 1;
                value_to_index[cur_value] = i;
                next[i] = value_to_index[cur_value + 1];
            } else {
                // Do nothing.
                ;
            }
        } else {
            if (value_to_len[cur_value] > 1) {
                // Do nothing.
                ;
            } else {
                value_to_len[cur_value] = 1;
                value_to_index[cur_value] = i;
                next[i] = i;
            }
        }
        
        if (value_to_len[cur_value] > max_len) {
            head = i;
            max_len = max(max_len, value_to_len[cur_value]);
        }
    }
    
    cout << max_len << endl;
    
    cout << head << " ";
    while (next[head] != head) {
        head = next[head];
        cout << head << " ";
    }
    cout << endl;
    return 0;
}

